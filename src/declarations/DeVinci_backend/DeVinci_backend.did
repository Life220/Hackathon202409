type UserSettingsResult = 
 variant {
   Err: ApiError;
   Ok: UserSettings;
 };
type UserSettings = record {selectedAiModelId: text;};
type UpdateUserSettingsResult = 
 variant {
   Err: ApiError;
   Ok: bool;
 };
type UpdateChatObject = 
 record {
   chatTitle: text;
   id: text;
 };
type SignUpFormInput = 
 record {
   emailAddress: text;
   pageSubmittedFrom: text;
 };
type Message = 
 record {
   content: text;
   sender: text;
 };
type MemoryVectorsStoredResult = 
 variant {
   Err: ApiError;
   Ok: bool;
 };
type MemoryVectorsResult = 
 variant {
   Err: ApiError;
   Ok: vec MemoryVector;
 };
type MemoryVectorsCheckResult = 
 variant {
   Err: ApiError;
   Ok: bool;
 };
type MemoryVectorMetadata = record {id: int;};
type MemoryVector = 
 record {
   content: text;
   embedding: vec float64;
   metadata: MemoryVectorMetadata;
 };
type ExperienceType = 
 variant {
   Offchain;
   Onchain;
   Ondevice;
 };
type EmailSubscriber = 
 record {
   emailAddress: text;
   pageSubmittedFrom: text;
   subscribedAt: nat64;
 };
type EducationExperience = 
 record {
   aiModelIdentifier: opt text;
   creator: text;
   databaseIdentifier: opt text;
   databaseToInclude: DatabaseToInclude;
   experienceType: opt ExperienceType;
   id: text;
   isStandaloneApp: bool;
   longDescription: text;
   note: text;
   shortDescription: text;
   standaloneAppUrl: opt text;
   title: text;
 };
type DeVinciBackend = 
 service {
   check_caller_has_memory_vectors_entry: () ->
    (MemoryVectorsCheckResult) query;
   create_chat: (vec Message) -> (ChatCreationResult);
   delete_chat: (text) -> (ChatResult);
   delete_email_subscriber: (text) -> (bool);
   get_caller_chat_history: () -> (ChatsPreviewResult) query;
   get_caller_chats: () -> (ChatsResult) query;
   get_caller_memory_vectors: () -> (MemoryVectorsResult) query;
   get_caller_settings: () -> (UserSettingsResult) query;
   get_chat: (text) -> (ChatResult) query;
   get_education_experiences: () -> (vec EducationExperience) query;
   get_email_subscribers: () -> (vec record {
                                       text;
                                       EmailSubscriber;
                                     }) query;
   greet: (text) -> (text);
   store_user_chats_memory_vectors: (vec MemoryVector) ->
    (MemoryVectorsStoredResult);
   submit_signup_form: (SignUpFormInput) -> (text);
   update_caller_settings: (UserSettings) -> (UpdateUserSettingsResult);
   update_chat_messages: (text, vec Message) -> (ChatIdResult);
   update_chat_metadata: (UpdateChatObject) -> (ChatIdResult);
 };
type DatabaseToInclude = 
 variant {
   External;
   Local;
   None;
 };
type ChatsResult = 
 variant {
   Err: ApiError;
   Ok: vec Chat;
 };
type ChatsPreviewResult = 
 variant {
   Err: ApiError;
   Ok: vec ChatPreview;
 };
type ChatResult = 
 variant {
   Err: ApiError;
   Ok: Chat;
 };
type ChatPreview = 
 record {
   chatTitle: text;
   creationTime: nat64;
   firstMessagePreview: text;
   id: text;
 };
type ChatIdResult = 
 variant {
   Err: ApiError;
   Ok: text;
 };
type ChatCreationResult = 
 variant {
   Err: ApiError;
   Ok: text;
 };
type Chat = 
 record {
   chatTitle: text;
   creationTime: nat64;
   firstMessagePreview: text;
   id: text;
   messages: vec Message;
   owner: principal;
 };
type ApiError = 
 variant {
   InvalidTokenId;
   Other: text;
   Unauthorized;
   ZeroAddress;
 };
service : (principal) -> DeVinciBackend
